package compiler.main;

import compiler.MiniJavaCompiler;
import java.util.List;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.GnuParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.ParseException;

//import compiler.StringTable;
//import compiler.lexer.Lexer;
//import compiler.lexer.Token;
//import compiler.lexer.TokenType;

public class CompilerApp {

	private static final String LEXTEST = "lextest";

	public static void main(String args[]) {
		Options options = new Options();
		options.addOption("h", "help", false, "print this message");
		options.addOption("l", LEXTEST, false, "print tokens generated by lexer");

        // @andreas-eberle the option is "--lextest", not "-lextest", keep gnu parser
		CommandLineParser parser = new GnuParser();
		try {
			CommandLine cmd = parser.parse(options, args);
			if (cmd.hasOption("help"))
			{
				printHelp(options);
				return;
			}

            if (cmd.hasOption("lextest"))
            {
                MiniJavaCompiler.setOutputFormat(MiniJavaCompiler.OutputFormat.LEXER);
            }
            
            // @andreas-eberle  IMHO this class should only parse cmd options and
            // set correct values in compiler facade. the facade does compilation logic
            // including calling lexer, parser, etc.
            // (IMHO as in I insist - because we get points for software engineering)
            List args1 = cmd.getArgList();
            if (args1.size() != 1) {
                System.err.println( "Missing Filename / To Many Arguments");
                System.exit(-1);
            }
            
            // @andreas-eberle this is a facade for whole compiler
            // input: source-file name
            MiniJavaCompiler.compile((String) args1.get(0));

        } catch (Exception e) {
            System.err.println("Wrong Command Line Parameters: " + e.getMessage());
            System.exit(-1);
        }
	}

//	private static void executeLexerTest(String file) throws IOException {
//		Lexer lexer = new Lexer(new BufferedInputStream(new FileInputStream(file)), new StringTable());
//
//		Token token;
//		do {
//			token = lexer.getNextToken();
//			System.out.println(token);
//		} while (token != null && token.getType() != TokenType.EOF);
//	}

	private static void printHelp(Options options) {
		HelpFormatter formatter = new HelpFormatter();
		formatter.printHelp("compiler", options);
	}
}
